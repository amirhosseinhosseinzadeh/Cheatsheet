rust macros like [println!()]

commands:
cargo new
cargo build
cargo clean
cargo run
cargo check

mutable/immutable
shadowing

return type [Result] containts two const err, ok


data types {
	subset:scalar,
	compund
}

scalar represent a single value which contains =>
* integer
* floating-point numbers
* boolean
* character


for signed integers range would be => from -(2 ^ ( n - 1) ) to 2 ^ (n - 1) - 1
for unisigned integers range would be  => from 0 to 2 ^ n - 1

**n stands for bit**

we also have isize and usize which depends on cpu arch type (x64 , x32)

f32 and f64 are for floating point numbers
boolean
char
--------------------
compound types
rust have 2 primitive comound type
tuple and array

tples are a general way to store multiple object with a fixed length size and one it created it cant grow or shrink in size 
let tup : (i32, f.64) = (1 , 2.1);

accessing members =>
let (x,y) = tup;
or
tup.0  //1
tup.1  //2.1

next one array which unlike the tuple all elements of array is from the same type
let arr = [1,2,3,4,5];
or
let arr : [i32 ; 3] = [0 , 1 , 2];
the 3 here is the length of array which is fixed
if trying to get item using [idx] way and incoming index be higher or equal to array length the program will panic

functions

fn main(){}
fn test(value : i32){}

we have 2 type of functions in rust

statements -> return nothing
like 
let y = 2 + 3;
you cant go like 
let y = (let x = 2 +3 );
because inside of paranthesies we have a statement which retuns nothing unlike c++ or rust etc..

expression -> evaluate to a result value

Calling a function is an expression. 
Calling a macro is an expression. 
A new scope block created with curly brackets is an expression

let x = {
	let y = 5;
	5 + 1
} // 6

as u can see it is a expression with a return value and as u notice we didnt end assignment with ";"  because it would use for statements

fn main(){
	let x = another_method(); // 5
}

fn another_function() -> i32{
	5
}

if conditions have not much diff with others

if 1 == 2 && 3 ==4 { //action }

loops 

loop{
	//do something
	if true{
		break;
	}
	if false{
		continue;
	}
}

if having two or more inside loop we can specify them with lable and break/continue th loop on target as below =>

let mut d = 3;
'outer_loop : loop{
	loop{
		if d == 10{
			break 'outer_loop;
		}
		d = d + 1;
	}
}

in this sample if we dont specify the outer_loop the break will apply on the unlabled loop so basically we have an infinite loop which at some place  
does nothing and wont end neither

while loop =>

let mut num = 3;
while num > 0 {
	num = num -1;
}

for loop =>

let arr = [1,2,4];
for item in arr {
	// do something
}

range =>

for item in (1..4).


Ownership is Rust’s most unique feature and has deep implications for the rest of the language. 
It enables Rust to make memory safety guarantees without needing a garbage collector, so it’s important to understand how ownership works.

related features: borrowing, slices, and how Rust lays data out in memory

ownership rules:
* each value in rust has an owner
* there can only be one owner in runtime
* when the owner goes out of scope the value will be dropped

the ways we can change ownership of an object 
first of all we need to know for scalar types owner ship wont change in below cases because it use deep copy instead of shallow copy

assignin to another variable =>

let s = String::from("ss");
let s2 = s;
println!("{s}"); // raise compile time error

passing to a function =>

let s = String::from("123");
show(s);
println!("{}",s); // raise compile time error

fn show(val : String){
	//do something
}

return also move the ownership

let val = take_string();
println!("{val}");

fn take_string() -> String{
	let s = String::from("12345");
	s
}

this can get very annoying because each time we pass an object like mentioned we need to some how retun it so it won go out of scope and 
being automatically droped 

let  str = String::from("test");
let (str2,len) = calc_ln(str); // ownership moved so str is inaccessible
println!("{}" , str2);

fn calc_ln(s : String) -> (String , usize){
	let size = s.len();
	(s, size)
}

to remove this disaster we can work with borrowing

borrowing

let str = String::from("1234");
let size = calc_ln(&str);// owner ship didnt moved to new scop hence str is still valid to use
println!("{}" , str);

fn calc_ln(s : &String) -> usize{
	let size = s.len();
	size
}

it's called referncing which we have a oppoiste approach which we call it dereferencing
which use dereference operator    "*"

mutable reference =>

let mut s: String = String::from("hello");
add(&mut s);
println!("{}",s);

fn add(str : &mut String){
	str.push_str(" world");
}


mutable references have one restriction which is if we cant have two mutable reference from a single value 

let mut s = String::from("1234");
let r = &mut s;
let d = &mut s; // violation
println!("{},{}",r,d);

rust compiler also prevent from unsafe memory allocation which refer as dangling reference
it means refereing to a part of memory which already have released

let s  = return_val();

fn return_val() -> &String{
	let s = String::new();
	&s // compile time err
}

Slice 

Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection. A slice is a kind of reference, 
so it does not have ownership.

consider we have code below

let s =String::from("private field");

we know the first index of a char with empty space is "7"
so in case we want to write program which sperate words by ' ' free space char we would store these indexes like below 

let idx : usize = 7;

but what if string got manipulate but another part of program

s.clear();

in that case we wont get any compile error but we surely have a runtime one
there for we can use slices

let slice = &s[0..7]; // private

or the whole phrase

let slice = &s[0..s.len()]; 
let slice2 = &s[..]; // private field

slice can be apply to all type of collections like Vec , array , string, etc..

struct

structs are the way we can group up a couple of values which beside eachother would be meaningfull
enums and struct are the building blocks of creating new custom types for a business

there are some sort of functions in enums which we call them methods

defining a structure =>

struct User {
	active : bool,
	username : String,
	email : String,
	sign_in_count : u64,
}

decalre user =>

let user = User{
	active : true,
	username : String::from("john"),
	email : String::from("jhon@hotmail.com"),
	sign_in_count : 0
}

accessing the value of fields =>

let user_is_active : bool = user.active;

if the instance is mutable we can modify it fields =>

let mut user = User{
	active : true,
	username : String::from("john"),
	email : String::from("jhon@hotmail.com"),
	sign_in_count : 0
}

//toggle active
user.active = !user.active;

declare a builder function for struct =>

fn create_user(username : String, email : String) -> User{
	User{
		username : username,
		email : email,
		active : true,
		sign_in_count : 1
	}
}

declare a builder function using field init short-hand =>

fn create_user(username : String, email: String) -> User{
	User{
		username,
		active : true,
		email,
		sign_in_count : 1
	}
}


Note : an instance of enum whether is mutable or immutable and we cant spefiy to some part 
be opposite in modification access

now consider we want to add a new instance of user to the scope with a smal modification, we can go like this =>

let user2 = User {
    active: user1.active,
    username: user1.username,
    email: String::from("another@example.com"),
    sign_in_count: user1.sign_in_count,
};

or a better approach is =>


let user2 = User{
	email : String::from("another_email@hotmail.com"),
	..user
}

this little fire cracker would handle the rest of the struct for us, so basically we have another struct only with 
a short modification with less amount of code that is possible (shoutout to this language)

but important point is for data types which doesnt implement "stack-only data:copy" like String fields after
creating user2 u cannot access user.email because it has moved to user2 but for those datatypes which implement this
they are still valid in scope

//moved data 
println!("{}",user.email) //compile time error
//valid data
println!("{}",user.active) // run perfectly


Using Tuple Structs Without Named Fields to Create Different Types =>

struct Color(i32,i32,i32);

fn main(){
	let orange = Color(0,0,0);
}

these type of structs are deconstructable =>

let Color(r,g,b) = orange;

Unit-Like Structs Without Any Fields =>

struct AlwaysEqual;

fn main(){
	let eq = AlwaysEqual;
}

u can also store string slice &str as field but we do need specify life time otherwise the code wont compile at all

Outer attribute
one of the most common one is debug which let us print a struct in debug mode=>

#[derive(Debug)]
struct SomeData{
	name : String
}

fn main(){
	let s = SomeData{
	
	};
	println!("{:?}",s);
	println!("{s:?}");	
	//or
	println!("{:#?}",s);
	println!("{s:#?}"); //print pretty
}

another way is to use debug macro =>

#[derive(Debug)]
struct SomeData{
	name : String
}
fn main(){
	let s = SomeData{
		name : String::from("test")
	};
	dbg!(&s);
}

methods are similar to function which will add some functionality to enum, struct and trait objects =>

fn main(){
    let g = Greeting{
        name : String::from("Amir")
    };
    let msg = g.announce();
    println!("{msg}");
}

struct Greeting{
    name : String
}

impl Greeting{
    fn announce(&self) -> String{
        String::from(format!("Hello to {}",self.name))
    }
}

method dereferencing

n C and C++, two different operators are used for calling methods: you use . if you’re calling a method 
on the object directly and -> if you’re calling the method on a pointer to the object and need to dereference the pointer first. 
In other words, if object is a pointer, object->something() is similar to (*object).something().

Here’s how it works: when you call a method with object.something(), Rust automatically adds in &, &mut, or * 
so object matches the signature of the method. In other words, the following are the same:

--------------------------------
p1.distance(&p2);
(&p1).distance(&p2);
--------------------------------

enums:
Enums allow you to define a type by enumerating its possible variants
we’ll look at how pattern matching in the match expression makes it easy to run different code for different values of an enum

enum IpAddrKind{
	Ipv4,
	Ipv6
}

let ip = IpAddrKind::Ipv4;
let ip_v6 = IpAddrKind::Ipv6;

we also can map a data for each enum value =>

enum RandomType{
	RandomText(String),
	RandomPositiveNumber(u32),
	RandomNumber(i32)
}

let rnd_type = RandomType::RandomText(String::from("93t4093$T$%T"));
let rnd_type2 = RandomType::RandomPositiveNumber(9390023 as u32);

were able to define method for enums as well =>

enum Message {
    TextMessage(String),
    Media(Vec<u32>),
}

impl Message {
    fn new_text_msg(message: String) -> Message {
        Message::TextMessage(message)
    }
    fn new_media_msg(attachment_body: Vec<u32>) -> Message {
        Message::Media(attachment_body)
    }
}

in rust we actually dont have null (what the actual fuck ????????????????????????????????????????????????????????????????????????????)
they have an alternative way they calls Option which  says a vlue whether is absent or accessible => 

let d : Option<i32> = None;
let d2 : Option<i32> = Some(222);

the option is an enum which have these two condition of value (absent or reachable) with Some(val) u can fill ur variable 

let d : Option<i32> = None;
if d > Option(0){
	//do something
} // nothing would happen

//continue
//https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html